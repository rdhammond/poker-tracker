USE [PokerTracker]
GO
/****** Object:  UserDefinedFunction [dbo].[udf_CardRoomIdByName]    Script Date: 4/23/2016 2:26:43 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[udf_CardRoomIdByName]
(
	@Name VARCHAR(64)
)
RETURNS UNIQUEIDENTIFIER AS
BEGIN
	DECLARE @Id UNIQUEIDENTIFIER
	SELECT TOP 1 @Id = Id FROM dbo.CardRooms WHERE Name = @Name

	Return @Id
END

GO
/****** Object:  UserDefinedFunction [dbo].[udf_GameIdByName]    Script Date: 4/23/2016 2:26:43 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[udf_GameIdByName]
(
	@Name VARCHAR(64)
)
RETURNS UNIQUEIDENTIFIER AS
BEGIN
	DECLARE @Id UNIQUEIDENTIFIER
	SELECT TOP 1 @Id = Id FROM dbo.Games WHERE Name = @Name

	Return @Id
END

GO
/****** Object:  UserDefinedFunction [dbo].[udf_TotalHourlyRate]    Script Date: 4/23/2016 2:26:43 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[udf_TotalHourlyRate]()
RETURNS FLOAT AS
BEGIN
	DECLARE @Result FLOAT

	SELECT @Result = ROUND(SUM(te.StackDifferential) / (CAST(SUM(s.MinutesActive) AS FLOAT) / 60), 2)
	FROM dbo.[Sessions] s
	INNER JOIN dbo.TimeEntries te ON s.Id = te.SessionId
	WHERE s.EndTime IS NOT NULL

	RETURN @Result
END
GO
/****** Object:  Table [dbo].[CardRooms]    Script Date: 4/23/2016 2:26:43 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[CardRooms](
	[Id] [uniqueidentifier] NOT NULL,
	[Name] [varchar](64) NOT NULL,
	[Address] [varchar](64) NULL,
	[City] [varchar](32) NULL,
	[State] [char](2) NULL,
	[ZipCode] [char](5) NULL,
PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [UQ_CardRooms_Name] UNIQUE NONCLUSTERED 
(
	[Name] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[Games]    Script Date: 4/23/2016 2:26:43 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[Games](
	[Id] [uniqueidentifier] NOT NULL,
	[Name] [varchar](64) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [UQ_Games_Name] UNIQUE NONCLUSTERED 
(
	[Name] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[Sessions]    Script Date: 4/23/2016 2:26:43 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Sessions](
	[Id] [uniqueidentifier] NOT NULL,
	[CardRoomId] [uniqueidentifier] NOT NULL,
	[SmallBlind] [int] NOT NULL,
	[BigBlind] [int] NOT NULL,
	[StartTime] [datetime] NOT NULL,
	[EndTime] [datetime] NULL,
	[Notes] [text] NULL,
	[GameId] [uniqueidentifier] NOT NULL,
	[HoursActive] [decimal](5, 2) NULL,
PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [dbo].[TimeEntries]    Script Date: 4/23/2016 2:26:43 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TimeEntries](
	[Id] [uniqueidentifier] NOT NULL DEFAULT (newid()),
	[SessionId] [uniqueidentifier] NOT NULL,
	[RecordedAt] [datetime] NOT NULL,
	[StackSize] [int] NOT NULL,
	[StackDifferential] [int] NULL,
	[DealerTokes] [int] NOT NULL,
	[ServerTips] [int] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  UserDefinedFunction [dbo].[udf_LatestBankroll]    Script Date: 4/23/2016 2:26:43 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[udf_LatestBankroll]()
RETURNS TABLE AS RETURN
SELECT TOP 1 StackSize FROM dbo.TimeEntries ORDER BY RecordedAt DESC
GO
/****** Object:  View [dbo].[vw_Summary]    Script Date: 4/23/2016 2:26:43 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






CREATE VIEW [dbo].[vw_Summary]
AS
SELECT
	cr.Name As Cardroom,
	g.Name As Game,
	CONCAT('$', s.BigBlind, '/$', s.BigBlind*2) As Limit,
	ROUND(CAST(s.MinutesActive AS FLOAT) / 60, 2) As HoursPlayed,
	DATEPART(day, s.StartTime) As [DayOfMonth],
	CASE DATEPART(weekday, s.StartTime)
		WHEN 1 THEN 'U'
		WHEN 2 THEN 'M'
		WHEN 3 THEN 'T'
		WHEN 4 THEN 'W'
		WHEN 5 THEN 'R'
		WHEN 6 THEN 'F'
		WHEN 7 THEN 'S'
	END As [DayOfWeek],
	s.StartTime,
	s.EndTime,
	SUM(COALESCE(te.StackDifferential,0)) As WinLoss,
	ROUND(SUM(COALESCE(te.StackDifferential,0)) / CAST(s.BigBlind AS FLOAT), 2) As WinLossBB,
	CEILING(SUM(COALESCE(te.StackDifferential,0)) / (CAST(s.MinutesActive AS FLOAT) / 60)) As HourlyRate,
	ROUND(SUM(COALESCE(te.StackDifferential,0)) / (CAST(s.MinutesActive AS FLOAT) / 60) / s.BigBlind, 2) As HourlyRateBB
FROM
	dbo.[Sessions] s
	INNER JOIN dbo.Games g ON s.GameId = g.Id
	INNER JOIN dbo.CardRooms cr ON s.CardRoomId = cr.Id
	INNER JOIN dbo.TimeEntries te ON te.SessionId = s.Id
WHERE
	s.EndTime IS NOT NULL
GROUP BY
	cr.Name, g.Name, s.BigBlind, s.MinutesActive, s.StartTime, s.EndTime






GO
ALTER TABLE [dbo].[TimeEntries]  WITH CHECK ADD  CONSTRAINT [FK_TimeEntries_Sessions] FOREIGN KEY([SessionId])
REFERENCES [dbo].[Sessions] ([Id])
GO
ALTER TABLE [dbo].[TimeEntries] CHECK CONSTRAINT [FK_TimeEntries_Sessions]
GO
ALTER TABLE [dbo].[Sessions]  WITH CHECK ADD  CONSTRAINT [CK_BigBlind] CHECK  (([BigBlind]>(0)))
GO
ALTER TABLE [dbo].[Sessions] CHECK CONSTRAINT [CK_BigBlind]
GO
ALTER TABLE [dbo].[Sessions]  WITH CHECK ADD  CONSTRAINT [CK_Sessions_HoursActive] CHECK  ((dateadd(minute,coalesce([HoursActive],(0))*(60),[StartTime])<=[EndTime]))
GO
ALTER TABLE [dbo].[Sessions] CHECK CONSTRAINT [CK_Sessions_HoursActive]
GO
ALTER TABLE [dbo].[Sessions]  WITH CHECK ADD  CONSTRAINT [CK_SmallBlind] CHECK  (([SmallBlind]>(0)))
GO
ALTER TABLE [dbo].[Sessions] CHECK CONSTRAINT [CK_SmallBlind]
GO
ALTER TABLE [dbo].[Sessions]  WITH CHECK ADD  CONSTRAINT [CK_SmallBlind_BigBlind] CHECK  (([SmallBlind]<=[BigBlind]))
GO
ALTER TABLE [dbo].[Sessions] CHECK CONSTRAINT [CK_SmallBlind_BigBlind]
GO
ALTER TABLE [dbo].[Sessions]  WITH CHECK ADD  CONSTRAINT [CK_StartTime_EndTime] CHECK  (([StartTime]<[EndTime]))
GO
ALTER TABLE [dbo].[Sessions] CHECK CONSTRAINT [CK_StartTime_EndTime]
GO
ALTER TABLE [dbo].[TimeEntries]  WITH CHECK ADD  CONSTRAINT [CK_DealerTokes] CHECK  (([DealerTokes]>=(0)))
GO
ALTER TABLE [dbo].[TimeEntries] CHECK CONSTRAINT [CK_DealerTokes]
GO
ALTER TABLE [dbo].[TimeEntries]  WITH CHECK ADD  CONSTRAINT [CK_ServerTips] CHECK  (([ServerTips]>=(0)))
GO
ALTER TABLE [dbo].[TimeEntries] CHECK CONSTRAINT [CK_ServerTips]
GO
/****** Object:  StoredProcedure [dbo].[usp_FinalizeSession]    Script Date: 4/23/2016 2:26:43 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_FinalizeSession]
(
	@SessionId UNIQUEIDENTIFIER,
	@EndTime DATETIME,
	@HoursActive DECIMAL(5,2),
	@OptionalNotes TEXT
)
AS
BEGIN
	SET NOCOUNT ON

	DECLARE @Msg VARCHAR(128) = CONCAT('Session ', @SessionId, ' does not exist.')
	IF NOT EXISTS(SELECT 1 FROM dbo.[Sessions] WHERE Id = @SessionId)
	THROW 51000, @Msg, 1

	SET @Msg = CONCAT('Session ', @SessionId, ' is already closed.')
	IF EXISTS(SELECT 1 FROM dbo.[Sessions] WHERE Id = @SessionId AND EndTime IS NOT NULL)
	THROW 51000, @Msg, 1

	CREATE TABLE #StackDifferentials
	(
		Id UNIQUEIDENTIFIER NOT NULL PRIMARY KEY,
		StackDifferential INT NOT NULL
	)
	
	DECLARE DIFF_CURSOR CURSOR FAST_FORWARD FOR
		SELECT Id, StackSize
		FROM dbo.TimeEntries
		WHERE SessionId = @SessionId
		ORDER BY RecordedAt

	DECLARE @Id UNIQUEIDENTIFIER
	DECLARE @StackSize INT

	OPEN DIFF_CURSOR
	FETCH FROM DIFF_CURSOR INTO @Id, @StackSize

	DECLARE @StackDifferential INT = 0
	DECLARE @LastStackSize INT = NULL

	WHILE @@FETCH_STATUS = 0
	BEGIN
		IF @LastStackSize IS NOT NULL
		SET @StackDifferential = @StackSize - @LastStackSize

		INSERT INTO #StackDifferentials(Id, StackDifferential)
		VALUES(@Id, @StackDifferential)

		SET @LastStackSize = @StackSize
		FETCH FROM DIFF_CURSOR INTO @Id, @StackSize
	END

	CLOSE DIFF_CURSOR
	DEALLOCATE DIFF_CURSOR
	BEGIN TRANSACTION

	MERGE INTO dbo.TimeEntries te USING #StackDifferentials sd ON te.Id = sd.Id
	WHEN MATCHED THEN UPDATE SET te.StackDifferential = sd.StackDifferential;

	UPDATE dbo.[Sessions]
		SET EndTime = @EndTime, Notes = @OptionalNotes, HoursActive = @HoursActive
		WHERE Id = @SessionId

	COMMIT TRANSACTION
	DROP TABLE #StackDifferentials
END

GO
/****** Object:  StoredProcedure [dbo].[usp_StartSession]    Script Date: 4/23/2016 2:26:43 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--SELECT * FROM [Sessions]

CREATE PROCEDURE [dbo].[usp_StartSession]
(
	@StartTime DATETIME,
	@CardRoomId UNIQUEIDENTIFIER,
	@GameId UNIQUEIDENTIFIER,
	@SmallBlind INT,
	@BigBlind INT,
	@StartingStackSize INT
)
AS
BEGIN
	SET NOCOUNT ON
	DECLARE @SessionId UNIQUEIDENTIFIER
	DECLARE @TimeEntryId UNIQUEIDENTIFIER
	BEGIN TRANSACTION

	INSERT INTO dbo.[Sessions](Id, CardRoomId, GameId, SmallBlind, BigBlind, StartTime, EndTime, MinutesActive, Notes)
	VALUES(@SessionId, @CardRoomId, @GameId, @SmallBlind, @BigBlind, @StartTime, NULL, NULL, NULL)
	
	INSERT INTO dbo.TimeEntries(Id, SessionId, RecordedAt, StackSize, StackDifferential, DealerTokes, ServerTips)
	VALUES (@TimeEntryId, @SessionId, @StartTime, @StartingStackSize, 0, 0, 0)

	COMMIT TRANSACTION
	SELECT @SessionId AS Id
END

GO
